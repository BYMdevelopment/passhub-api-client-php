<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassHub API
 *
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace passhub\client\model;

use \ArrayAccess;
use \passhub\client\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alias_voucher_ids' => 'string[]',
        'contract_holder_id' => 'string',
        'contract_holder_name' => 'string',
        'customer_company' => 'string',
        'customer_email' => 'string',
        'customer_name' => 'string',
        'customer_uid' => 'string',
        'expire_date' => 'string',
        'expiry_date_before_validtion' => 'string',
        'group_name' => 'string',
        'id' => 'int',
        'init_voucher_id' => 'string',
        'is_canceled' => 'bool',
        'is_validated' => 'bool',
        'metadata' => '\passhub\client\model\SimpleMetadata',
        'originator_voucher_id' => 'string',
        'price_paid' => 'double',
        'product' => '\passhub\client\model\SimpleProductDTO',
        'quantity' => 'int',
        'sku' => 'string',
        'tour_date' => 'string',
        'updated' => 'string',
        'updated_by' => '\passhub\client\model\UserDTO',
        'validation_id' => 'string',
        'vendor_voucher_id' => 'string',
        'voucher_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alias_voucher_ids' => null,
        'contract_holder_id' => null,
        'contract_holder_name' => null,
        'customer_company' => null,
        'customer_email' => null,
        'customer_name' => null,
        'customer_uid' => null,
        'expire_date' => null,
        'expiry_date_before_validtion' => null,
        'group_name' => null,
        'id' => 'int64',
        'init_voucher_id' => null,
        'is_canceled' => null,
        'is_validated' => null,
        'metadata' => null,
        'originator_voucher_id' => null,
        'price_paid' => 'double',
        'product' => null,
        'quantity' => 'int32',
        'sku' => null,
        'tour_date' => null,
        'updated' => null,
        'updated_by' => null,
        'validation_id' => null,
        'vendor_voucher_id' => null,
        'voucher_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias_voucher_ids' => 'aliasVoucherIds',
        'contract_holder_id' => 'contractHolderId',
        'contract_holder_name' => 'contractHolderName',
        'customer_company' => 'customerCompany',
        'customer_email' => 'customerEmail',
        'customer_name' => 'customerName',
        'customer_uid' => 'customerUid',
        'expire_date' => 'expireDate',
        'expiry_date_before_validtion' => 'expiryDateBeforeValidtion',
        'group_name' => 'groupName',
        'id' => 'id',
        'init_voucher_id' => 'initVoucherId',
        'is_canceled' => 'isCanceled',
        'is_validated' => 'isValidated',
        'metadata' => 'metadata',
        'originator_voucher_id' => 'originatorVoucherId',
        'price_paid' => 'pricePaid',
        'product' => 'product',
        'quantity' => 'quantity',
        'sku' => 'sku',
        'tour_date' => 'tourDate',
        'updated' => 'updated',
        'updated_by' => 'updatedBy',
        'validation_id' => 'validationId',
        'vendor_voucher_id' => 'vendorVoucherId',
        'voucher_id' => 'voucherId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias_voucher_ids' => 'setAliasVoucherIds',
        'contract_holder_id' => 'setContractHolderId',
        'contract_holder_name' => 'setContractHolderName',
        'customer_company' => 'setCustomerCompany',
        'customer_email' => 'setCustomerEmail',
        'customer_name' => 'setCustomerName',
        'customer_uid' => 'setCustomerUid',
        'expire_date' => 'setExpireDate',
        'expiry_date_before_validtion' => 'setExpiryDateBeforeValidtion',
        'group_name' => 'setGroupName',
        'id' => 'setId',
        'init_voucher_id' => 'setInitVoucherId',
        'is_canceled' => 'setIsCanceled',
        'is_validated' => 'setIsValidated',
        'metadata' => 'setMetadata',
        'originator_voucher_id' => 'setOriginatorVoucherId',
        'price_paid' => 'setPricePaid',
        'product' => 'setProduct',
        'quantity' => 'setQuantity',
        'sku' => 'setSku',
        'tour_date' => 'setTourDate',
        'updated' => 'setUpdated',
        'updated_by' => 'setUpdatedBy',
        'validation_id' => 'setValidationId',
        'vendor_voucher_id' => 'setVendorVoucherId',
        'voucher_id' => 'setVoucherId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias_voucher_ids' => 'getAliasVoucherIds',
        'contract_holder_id' => 'getContractHolderId',
        'contract_holder_name' => 'getContractHolderName',
        'customer_company' => 'getCustomerCompany',
        'customer_email' => 'getCustomerEmail',
        'customer_name' => 'getCustomerName',
        'customer_uid' => 'getCustomerUid',
        'expire_date' => 'getExpireDate',
        'expiry_date_before_validtion' => 'getExpiryDateBeforeValidtion',
        'group_name' => 'getGroupName',
        'id' => 'getId',
        'init_voucher_id' => 'getInitVoucherId',
        'is_canceled' => 'getIsCanceled',
        'is_validated' => 'getIsValidated',
        'metadata' => 'getMetadata',
        'originator_voucher_id' => 'getOriginatorVoucherId',
        'price_paid' => 'getPricePaid',
        'product' => 'getProduct',
        'quantity' => 'getQuantity',
        'sku' => 'getSku',
        'tour_date' => 'getTourDate',
        'updated' => 'getUpdated',
        'updated_by' => 'getUpdatedBy',
        'validation_id' => 'getValidationId',
        'vendor_voucher_id' => 'getVendorVoucherId',
        'voucher_id' => 'getVoucherId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alias_voucher_ids'] = isset($data['alias_voucher_ids']) ? $data['alias_voucher_ids'] : null;
        $this->container['contract_holder_id'] = isset($data['contract_holder_id']) ? $data['contract_holder_id'] : null;
        $this->container['contract_holder_name'] = isset($data['contract_holder_name']) ? $data['contract_holder_name'] : null;
        $this->container['customer_company'] = isset($data['customer_company']) ? $data['customer_company'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_uid'] = isset($data['customer_uid']) ? $data['customer_uid'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['expiry_date_before_validtion'] = isset($data['expiry_date_before_validtion']) ? $data['expiry_date_before_validtion'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['init_voucher_id'] = isset($data['init_voucher_id']) ? $data['init_voucher_id'] : null;
        $this->container['is_canceled'] = isset($data['is_canceled']) ? $data['is_canceled'] : null;
        $this->container['is_validated'] = isset($data['is_validated']) ? $data['is_validated'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['originator_voucher_id'] = isset($data['originator_voucher_id']) ? $data['originator_voucher_id'] : null;
        $this->container['price_paid'] = isset($data['price_paid']) ? $data['price_paid'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['tour_date'] = isset($data['tour_date']) ? $data['tour_date'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['validation_id'] = isset($data['validation_id']) ? $data['validation_id'] : null;
        $this->container['vendor_voucher_id'] = isset($data['vendor_voucher_id']) ? $data['vendor_voucher_id'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets alias_voucher_ids
     *
     * @return string[]
     */
    public function getAliasVoucherIds()
    {
        return $this->container['alias_voucher_ids'];
    }

    /**
     * Sets alias_voucher_ids
     *
     * @param string[] $alias_voucher_ids alias_voucher_ids
     *
     * @return $this
     */
    public function setAliasVoucherIds($alias_voucher_ids)
    {
        $this->container['alias_voucher_ids'] = $alias_voucher_ids;

        return $this;
    }

    /**
     * Gets contract_holder_id
     *
     * @return string
     */
    public function getContractHolderId()
    {
        return $this->container['contract_holder_id'];
    }

    /**
     * Sets contract_holder_id
     *
     * @param string $contract_holder_id contract_holder_id
     *
     * @return $this
     */
    public function setContractHolderId($contract_holder_id)
    {
        $this->container['contract_holder_id'] = $contract_holder_id;

        return $this;
    }

    /**
     * Gets contract_holder_name
     *
     * @return string
     */
    public function getContractHolderName()
    {
        return $this->container['contract_holder_name'];
    }

    /**
     * Sets contract_holder_name
     *
     * @param string $contract_holder_name contract_holder_name
     *
     * @return $this
     */
    public function setContractHolderName($contract_holder_name)
    {
        $this->container['contract_holder_name'] = $contract_holder_name;

        return $this;
    }

    /**
     * Gets customer_company
     *
     * @return string
     */
    public function getCustomerCompany()
    {
        return $this->container['customer_company'];
    }

    /**
     * Sets customer_company
     *
     * @param string $customer_company customer_company
     *
     * @return $this
     */
    public function setCustomerCompany($customer_company)
    {
        $this->container['customer_company'] = $customer_company;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email customer_email
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_uid
     *
     * @return string
     */
    public function getCustomerUid()
    {
        return $this->container['customer_uid'];
    }

    /**
     * Sets customer_uid
     *
     * @param string $customer_uid customer_uid
     *
     * @return $this
     */
    public function setCustomerUid($customer_uid)
    {
        $this->container['customer_uid'] = $customer_uid;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return string
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param string $expire_date expire_date
     *
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets expiry_date_before_validtion
     *
     * @return string
     */
    public function getExpiryDateBeforeValidtion()
    {
        return $this->container['expiry_date_before_validtion'];
    }

    /**
     * Sets expiry_date_before_validtion
     *
     * @param string $expiry_date_before_validtion expiry_date_before_validtion
     *
     * @return $this
     */
    public function setExpiryDateBeforeValidtion($expiry_date_before_validtion)
    {
        $this->container['expiry_date_before_validtion'] = $expiry_date_before_validtion;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets init_voucher_id
     *
     * @return string
     */
    public function getInitVoucherId()
    {
        return $this->container['init_voucher_id'];
    }

    /**
     * Sets init_voucher_id
     *
     * @param string $init_voucher_id init_voucher_id
     *
     * @return $this
     */
    public function setInitVoucherId($init_voucher_id)
    {
        $this->container['init_voucher_id'] = $init_voucher_id;

        return $this;
    }

    /**
     * Gets is_canceled
     *
     * @return bool
     */
    public function getIsCanceled()
    {
        return $this->container['is_canceled'];
    }

    /**
     * Sets is_canceled
     *
     * @param bool $is_canceled is_canceled
     *
     * @return $this
     */
    public function setIsCanceled($is_canceled)
    {
        $this->container['is_canceled'] = $is_canceled;

        return $this;
    }

    /**
     * Gets is_validated
     *
     * @return bool
     */
    public function getIsValidated()
    {
        return $this->container['is_validated'];
    }

    /**
     * Sets is_validated
     *
     * @param bool $is_validated is_validated
     *
     * @return $this
     */
    public function setIsValidated($is_validated)
    {
        $this->container['is_validated'] = $is_validated;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \passhub\client\model\SimpleMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \passhub\client\model\SimpleMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets originator_voucher_id
     *
     * @return string
     */
    public function getOriginatorVoucherId()
    {
        return $this->container['originator_voucher_id'];
    }

    /**
     * Sets originator_voucher_id
     *
     * @param string $originator_voucher_id originator_voucher_id
     *
     * @return $this
     */
    public function setOriginatorVoucherId($originator_voucher_id)
    {
        $this->container['originator_voucher_id'] = $originator_voucher_id;

        return $this;
    }

    /**
     * Gets price_paid
     *
     * @return double
     */
    public function getPricePaid()
    {
        return $this->container['price_paid'];
    }

    /**
     * Sets price_paid
     *
     * @param double $price_paid price_paid
     *
     * @return $this
     */
    public function setPricePaid($price_paid)
    {
        $this->container['price_paid'] = $price_paid;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \passhub\client\model\SimpleProductDTO
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \passhub\client\model\SimpleProductDTO $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets tour_date
     *
     * @return string
     */
    public function getTourDate()
    {
        return $this->container['tour_date'];
    }

    /**
     * Sets tour_date
     *
     * @param string $tour_date tour_date
     *
     * @return $this
     */
    public function setTourDate($tour_date)
    {
        $this->container['tour_date'] = $tour_date;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \passhub\client\model\UserDTO
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \passhub\client\model\UserDTO $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets validation_id
     *
     * @return string
     */
    public function getValidationId()
    {
        return $this->container['validation_id'];
    }

    /**
     * Sets validation_id
     *
     * @param string $validation_id validation_id
     *
     * @return $this
     */
    public function setValidationId($validation_id)
    {
        $this->container['validation_id'] = $validation_id;

        return $this;
    }

    /**
     * Gets vendor_voucher_id
     *
     * @return string
     */
    public function getVendorVoucherId()
    {
        return $this->container['vendor_voucher_id'];
    }

    /**
     * Sets vendor_voucher_id
     *
     * @param string $vendor_voucher_id vendor_voucher_id
     *
     * @return $this
     */
    public function setVendorVoucherId($vendor_voucher_id)
    {
        $this->container['vendor_voucher_id'] = $vendor_voucher_id;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id voucher_id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


