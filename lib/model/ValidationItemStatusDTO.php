<?php
/**
 * ValidationItemStatusDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassHub API
 *
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace passhub\client\model;

use \ArrayAccess;
use \passhub\client\ObjectSerializer;

/**
 * ValidationItemStatusDTO Class Doc Comment
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValidationItemStatusDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValidationItemStatusDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => 'double',
        'expiry_date' => 'string',
        'max_use_count' => 'int',
        'max_use_hours' => 'int',
        'start_date' => 'string',
        'type' => 'string',
        'used_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balance' => 'double',
        'expiry_date' => null,
        'max_use_count' => 'int32',
        'max_use_hours' => 'int32',
        'start_date' => null,
        'type' => null,
        'used_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'expiry_date' => 'expiryDate',
        'max_use_count' => 'maxUseCount',
        'max_use_hours' => 'maxUseHours',
        'start_date' => 'startDate',
        'type' => 'type',
        'used_count' => 'usedCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'expiry_date' => 'setExpiryDate',
        'max_use_count' => 'setMaxUseCount',
        'max_use_hours' => 'setMaxUseHours',
        'start_date' => 'setStartDate',
        'type' => 'setType',
        'used_count' => 'setUsedCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'expiry_date' => 'getExpiryDate',
        'max_use_count' => 'getMaxUseCount',
        'max_use_hours' => 'getMaxUseHours',
        'start_date' => 'getStartDate',
        'type' => 'getType',
        'used_count' => 'getUsedCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_BASIC_SINGLE = 'BASIC_SINGLE';
    const TYPE_BASIC_VALID_HOURS = 'BASIC_VALID_HOURS';
    const TYPE_PASS_LIMITED = 'PASS_LIMITED';
    const TYPE_PASS_UNLIMITED = 'PASS_UNLIMITED';
    const TYPE_PASS_CALENDAR = 'PASS_CALENDAR';
    const TYPE_FLEXPASS = 'FLEXPASS';
    const TYPE_PASS_CURRENCY = 'PASS_CURRENCY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BASIC_SINGLE,
            self::TYPE_BASIC_VALID_HOURS,
            self::TYPE_PASS_LIMITED,
            self::TYPE_PASS_UNLIMITED,
            self::TYPE_PASS_CALENDAR,
            self::TYPE_FLEXPASS,
            self::TYPE_PASS_CURRENCY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['max_use_count'] = isset($data['max_use_count']) ? $data['max_use_count'] : null;
        $this->container['max_use_hours'] = isset($data['max_use_hours']) ? $data['max_use_hours'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['used_count'] = isset($data['used_count']) ? $data['used_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets max_use_count
     *
     * @return int
     */
    public function getMaxUseCount()
    {
        return $this->container['max_use_count'];
    }

    /**
     * Sets max_use_count
     *
     * @param int $max_use_count max_use_count
     *
     * @return $this
     */
    public function setMaxUseCount($max_use_count)
    {
        $this->container['max_use_count'] = $max_use_count;

        return $this;
    }

    /**
     * Gets max_use_hours
     *
     * @return int
     */
    public function getMaxUseHours()
    {
        return $this->container['max_use_hours'];
    }

    /**
     * Sets max_use_hours
     *
     * @param int $max_use_hours max_use_hours
     *
     * @return $this
     */
    public function setMaxUseHours($max_use_hours)
    {
        $this->container['max_use_hours'] = $max_use_hours;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets used_count
     *
     * @return int
     */
    public function getUsedCount()
    {
        return $this->container['used_count'];
    }

    /**
     * Sets used_count
     *
     * @param int $used_count used_count
     *
     * @return $this
     */
    public function setUsedCount($used_count)
    {
        $this->container['used_count'] = $used_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


