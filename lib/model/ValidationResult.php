<?php
/**
 * ValidationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassHub API
 *
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace passhub\client\model;

use \ArrayAccess;
use \passhub\client\ObjectSerializer;

/**
 * ValidationResult Class Doc Comment
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValidationResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValidationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_skip_expiry_check' => 'bool',
        'contract_holder_id' => 'string',
        'contract_holder_name' => 'string',
        'error_code' => 'string',
        'extra' => 'map[string,string]',
        'meta' => '\passhub\client\model\UniversalAttribute[]',
        'print_status' => 'string',
        'recharge' => '\passhub\client\model\RechargePrompt',
        'status' => 'string',
        'suggested_order_items' => '\passhub\client\model\SuggestedOrder[]',
        'suggested_products' => '\passhub\client\model\ProductSuggestion[]',
        'transaction_tag' => 'string',
        'validation' => '\passhub\client\model\ValidationResultEntry[]',
        'validation_date' => 'string',
        'voucher_id' => 'string',
        'waiting_period_pending' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can_skip_expiry_check' => null,
        'contract_holder_id' => null,
        'contract_holder_name' => null,
        'error_code' => null,
        'extra' => null,
        'meta' => null,
        'print_status' => null,
        'recharge' => null,
        'status' => null,
        'suggested_order_items' => null,
        'suggested_products' => null,
        'transaction_tag' => null,
        'validation' => null,
        'validation_date' => null,
        'voucher_id' => null,
        'waiting_period_pending' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_skip_expiry_check' => 'canSkipExpiryCheck',
        'contract_holder_id' => 'contractHolderId',
        'contract_holder_name' => 'contractHolderName',
        'error_code' => 'errorCode',
        'extra' => 'extra',
        'meta' => 'meta',
        'print_status' => 'printStatus',
        'recharge' => 'recharge',
        'status' => 'status',
        'suggested_order_items' => 'suggestedOrderItems',
        'suggested_products' => 'suggestedProducts',
        'transaction_tag' => 'transactionTag',
        'validation' => 'validation',
        'validation_date' => 'validationDate',
        'voucher_id' => 'voucherId',
        'waiting_period_pending' => 'waitingPeriodPending'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_skip_expiry_check' => 'setCanSkipExpiryCheck',
        'contract_holder_id' => 'setContractHolderId',
        'contract_holder_name' => 'setContractHolderName',
        'error_code' => 'setErrorCode',
        'extra' => 'setExtra',
        'meta' => 'setMeta',
        'print_status' => 'setPrintStatus',
        'recharge' => 'setRecharge',
        'status' => 'setStatus',
        'suggested_order_items' => 'setSuggestedOrderItems',
        'suggested_products' => 'setSuggestedProducts',
        'transaction_tag' => 'setTransactionTag',
        'validation' => 'setValidation',
        'validation_date' => 'setValidationDate',
        'voucher_id' => 'setVoucherId',
        'waiting_period_pending' => 'setWaitingPeriodPending'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_skip_expiry_check' => 'getCanSkipExpiryCheck',
        'contract_holder_id' => 'getContractHolderId',
        'contract_holder_name' => 'getContractHolderName',
        'error_code' => 'getErrorCode',
        'extra' => 'getExtra',
        'meta' => 'getMeta',
        'print_status' => 'getPrintStatus',
        'recharge' => 'getRecharge',
        'status' => 'getStatus',
        'suggested_order_items' => 'getSuggestedOrderItems',
        'suggested_products' => 'getSuggestedProducts',
        'transaction_tag' => 'getTransactionTag',
        'validation' => 'getValidation',
        'validation_date' => 'getValidationDate',
        'voucher_id' => 'getVoucherId',
        'waiting_period_pending' => 'getWaitingPeriodPending'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ERROR_CODE_VALIDATION_ID_NOT_FOUND = 'VALIDATION_ID_NOT_FOUND';
    const ERROR_CODE_REQUESTED_PRODUCT_NOT_FOUND = 'REQUESTED_PRODUCT_NOT_FOUND';
    const ERROR_CODE_REQUESTED_PRODUCT_USED = 'REQUESTED_PRODUCT_USED';
    const ERROR_CODE_VALIDATION_FAILED = 'VALIDATION_FAILED';
    const ERROR_CODE_INSUFFICIENT_CURRENCY_AMOUNT = 'INSUFFICIENT_CURRENCY_AMOUNT';
    const ERROR_CODE_NOT_VALIDATABLE_PRODUCT = 'NOT_VALIDATABLE_PRODUCT';
    const ERROR_CODE_MAX_NUMBER_OF_USES_REACHED = 'MAX_NUMBER_OF_USES_REACHED';
    const ERROR_CODE_VOUCHER_EXPIRED = 'VOUCHER_EXPIRED';
    const ERROR_CODE_VALIDATION_BLOCKED_DATES = 'VALIDATION_BLOCKED_DATES';
    const ERROR_CODE_VALIDATION_BLOCKED_TIME = 'VALIDATION_BLOCKED_TIME';
    const ERROR_CODE_VALIDATION_BLOCKED_DAYS = 'VALIDATION_BLOCKED_DAYS';
    const ERROR_CODE_SYSTEMS_SYNC_FAILED = 'SYSTEMS_SYNC_FAILED';
    const ERROR_CODE_VALIDATIONS_PER_DAY_EXCEEDED = 'VALIDATIONS_PER_DAY_EXCEEDED';
    const ERROR_CODE_WAITING_PERIOD_NOT_EXPIRED = 'WAITING_PERIOD_NOT_EXPIRED';
    const PRINT_STATUS_NOT_PRINTABLE = 'NOT_PRINTABLE';
    const PRINT_STATUS_PRINTED = 'PRINTED';
    const PRINT_STATUS_NEED_PRINTING = 'NEED_PRINTING';
    const STATUS_SUCCESS = 'SUCCESS';
    const STATUS_CLARIFY = 'CLARIFY';
    const STATUS_FAILURE = 'FAILURE';
    const STATUS_CLARIFY_ORDER = 'CLARIFY_ORDER';
    const STATUS_CLARIFY_ITEM = 'CLARIFY_ITEM';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorCodeAllowableValues()
    {
        return [
            self::ERROR_CODE_VALIDATION_ID_NOT_FOUND,
            self::ERROR_CODE_REQUESTED_PRODUCT_NOT_FOUND,
            self::ERROR_CODE_REQUESTED_PRODUCT_USED,
            self::ERROR_CODE_VALIDATION_FAILED,
            self::ERROR_CODE_INSUFFICIENT_CURRENCY_AMOUNT,
            self::ERROR_CODE_NOT_VALIDATABLE_PRODUCT,
            self::ERROR_CODE_MAX_NUMBER_OF_USES_REACHED,
            self::ERROR_CODE_VOUCHER_EXPIRED,
            self::ERROR_CODE_VALIDATION_BLOCKED_DATES,
            self::ERROR_CODE_VALIDATION_BLOCKED_TIME,
            self::ERROR_CODE_VALIDATION_BLOCKED_DAYS,
            self::ERROR_CODE_SYSTEMS_SYNC_FAILED,
            self::ERROR_CODE_VALIDATIONS_PER_DAY_EXCEEDED,
            self::ERROR_CODE_WAITING_PERIOD_NOT_EXPIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrintStatusAllowableValues()
    {
        return [
            self::PRINT_STATUS_NOT_PRINTABLE,
            self::PRINT_STATUS_PRINTED,
            self::PRINT_STATUS_NEED_PRINTING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCESS,
            self::STATUS_CLARIFY,
            self::STATUS_FAILURE,
            self::STATUS_CLARIFY_ORDER,
            self::STATUS_CLARIFY_ITEM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_skip_expiry_check'] = isset($data['can_skip_expiry_check']) ? $data['can_skip_expiry_check'] : null;
        $this->container['contract_holder_id'] = isset($data['contract_holder_id']) ? $data['contract_holder_id'] : null;
        $this->container['contract_holder_name'] = isset($data['contract_holder_name']) ? $data['contract_holder_name'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['print_status'] = isset($data['print_status']) ? $data['print_status'] : null;
        $this->container['recharge'] = isset($data['recharge']) ? $data['recharge'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suggested_order_items'] = isset($data['suggested_order_items']) ? $data['suggested_order_items'] : null;
        $this->container['suggested_products'] = isset($data['suggested_products']) ? $data['suggested_products'] : null;
        $this->container['transaction_tag'] = isset($data['transaction_tag']) ? $data['transaction_tag'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
        $this->container['validation_date'] = isset($data['validation_date']) ? $data['validation_date'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['waiting_period_pending'] = isset($data['waiting_period_pending']) ? $data['waiting_period_pending'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!in_array($this->container['error_code'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'error_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrintStatusAllowableValues();
        if (!in_array($this->container['print_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'print_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!in_array($this->container['error_code'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPrintStatusAllowableValues();
        if (!in_array($this->container['print_status'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets can_skip_expiry_check
     *
     * @return bool
     */
    public function getCanSkipExpiryCheck()
    {
        return $this->container['can_skip_expiry_check'];
    }

    /**
     * Sets can_skip_expiry_check
     *
     * @param bool $can_skip_expiry_check can_skip_expiry_check
     *
     * @return $this
     */
    public function setCanSkipExpiryCheck($can_skip_expiry_check)
    {
        $this->container['can_skip_expiry_check'] = $can_skip_expiry_check;

        return $this;
    }

    /**
     * Gets contract_holder_id
     *
     * @return string
     */
    public function getContractHolderId()
    {
        return $this->container['contract_holder_id'];
    }

    /**
     * Sets contract_holder_id
     *
     * @param string $contract_holder_id contract_holder_id
     *
     * @return $this
     */
    public function setContractHolderId($contract_holder_id)
    {
        $this->container['contract_holder_id'] = $contract_holder_id;

        return $this;
    }

    /**
     * Gets contract_holder_name
     *
     * @return string
     */
    public function getContractHolderName()
    {
        return $this->container['contract_holder_name'];
    }

    /**
     * Sets contract_holder_name
     *
     * @param string $contract_holder_name contract_holder_name
     *
     * @return $this
     */
    public function setContractHolderName($contract_holder_name)
    {
        $this->container['contract_holder_name'] = $contract_holder_name;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($error_code) && !in_array($error_code, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'error_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return map[string,string]
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param map[string,string] $extra extra
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \passhub\client\model\UniversalAttribute[]
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \passhub\client\model\UniversalAttribute[] $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets print_status
     *
     * @return string
     */
    public function getPrintStatus()
    {
        return $this->container['print_status'];
    }

    /**
     * Sets print_status
     *
     * @param string $print_status print_status
     *
     * @return $this
     */
    public function setPrintStatus($print_status)
    {
        $allowedValues = $this->getPrintStatusAllowableValues();
        if (!is_null($print_status) && !in_array($print_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'print_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['print_status'] = $print_status;

        return $this;
    }

    /**
     * Gets recharge
     *
     * @return \passhub\client\model\RechargePrompt
     */
    public function getRecharge()
    {
        return $this->container['recharge'];
    }

    /**
     * Sets recharge
     *
     * @param \passhub\client\model\RechargePrompt $recharge recharge
     *
     * @return $this
     */
    public function setRecharge($recharge)
    {
        $this->container['recharge'] = $recharge;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suggested_order_items
     *
     * @return \passhub\client\model\SuggestedOrder[]
     */
    public function getSuggestedOrderItems()
    {
        return $this->container['suggested_order_items'];
    }

    /**
     * Sets suggested_order_items
     *
     * @param \passhub\client\model\SuggestedOrder[] $suggested_order_items suggested_order_items
     *
     * @return $this
     */
    public function setSuggestedOrderItems($suggested_order_items)
    {
        $this->container['suggested_order_items'] = $suggested_order_items;

        return $this;
    }

    /**
     * Gets suggested_products
     *
     * @return \passhub\client\model\ProductSuggestion[]
     */
    public function getSuggestedProducts()
    {
        return $this->container['suggested_products'];
    }

    /**
     * Sets suggested_products
     *
     * @param \passhub\client\model\ProductSuggestion[] $suggested_products suggested_products
     *
     * @return $this
     */
    public function setSuggestedProducts($suggested_products)
    {
        $this->container['suggested_products'] = $suggested_products;

        return $this;
    }

    /**
     * Gets transaction_tag
     *
     * @return string
     */
    public function getTransactionTag()
    {
        return $this->container['transaction_tag'];
    }

    /**
     * Sets transaction_tag
     *
     * @param string $transaction_tag transaction_tag
     *
     * @return $this
     */
    public function setTransactionTag($transaction_tag)
    {
        $this->container['transaction_tag'] = $transaction_tag;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return \passhub\client\model\ValidationResultEntry[]
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param \passhub\client\model\ValidationResultEntry[] $validation validation
     *
     * @return $this
     */
    public function setValidation($validation)
    {
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets validation_date
     *
     * @return string
     */
    public function getValidationDate()
    {
        return $this->container['validation_date'];
    }

    /**
     * Sets validation_date
     *
     * @param string $validation_date validation_date
     *
     * @return $this
     */
    public function setValidationDate($validation_date)
    {
        $this->container['validation_date'] = $validation_date;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id voucher_id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets waiting_period_pending
     *
     * @return int
     */
    public function getWaitingPeriodPending()
    {
        return $this->container['waiting_period_pending'];
    }

    /**
     * Sets waiting_period_pending
     *
     * @param int $waiting_period_pending waiting_period_pending
     *
     * @return $this
     */
    public function setWaitingPeriodPending($waiting_period_pending)
    {
        $this->container['waiting_period_pending'] = $waiting_period_pending;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


