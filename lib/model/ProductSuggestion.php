<?php
/**
 * ProductSuggestion
 *
 * PHP version 5
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassHub API
 *
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace passhub\client\model;

use \ArrayAccess;
use \passhub\client\ObjectSerializer;

/**
 * ProductSuggestion Class Doc Comment
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductSuggestion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductSuggestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connection_type' => 'string',
        'customer_type' => 'string',
        'id' => 'int',
        'name' => 'string',
        'product_tag' => 'string',
        'sku' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connection_type' => null,
        'customer_type' => null,
        'id' => 'int64',
        'name' => null,
        'product_tag' => null,
        'sku' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_type' => 'connectionType',
        'customer_type' => 'customerType',
        'id' => 'id',
        'name' => 'name',
        'product_tag' => 'productTag',
        'sku' => 'sku'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_type' => 'setConnectionType',
        'customer_type' => 'setCustomerType',
        'id' => 'setId',
        'name' => 'setName',
        'product_tag' => 'setProductTag',
        'sku' => 'setSku'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_type' => 'getConnectionType',
        'customer_type' => 'getCustomerType',
        'id' => 'getId',
        'name' => 'getName',
        'product_tag' => 'getProductTag',
        'sku' => 'getSku'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONNECTION_TYPE__INCLUDE = 'INCLUDE';
    const CONNECTION_TYPE_PASS = 'PASS';
    const CUSTOMER_TYPE_ADULT = 'ADULT';
    const CUSTOMER_TYPE_CHILD = 'CHILD';
    const CUSTOMER_TYPE_SENIOR = 'SENIOR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionTypeAllowableValues()
    {
        return [
            self::CONNECTION_TYPE__INCLUDE,
            self::CONNECTION_TYPE_PASS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerTypeAllowableValues()
    {
        return [
            self::CUSTOMER_TYPE_ADULT,
            self::CUSTOMER_TYPE_CHILD,
            self::CUSTOMER_TYPE_SENIOR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connection_type'] = isset($data['connection_type']) ? $data['connection_type'] : null;
        $this->container['customer_type'] = isset($data['customer_type']) ? $data['customer_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['product_tag'] = isset($data['product_tag']) ? $data['product_tag'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getConnectionTypeAllowableValues();
        if (!in_array($this->container['connection_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'connection_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!in_array($this->container['customer_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customer_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getConnectionTypeAllowableValues();
        if (!in_array($this->container['connection_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!in_array($this->container['customer_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type connection_type
     *
     * @return $this
     */
    public function setConnectionType($connection_type)
    {
        $allowedValues = $this->getConnectionTypeAllowableValues();
        if (!is_null($connection_type) && !in_array($connection_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'connection_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets customer_type
     *
     * @return string
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string $customer_type customer_type
     *
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!is_null($customer_type) && !in_array($customer_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customer_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product_tag
     *
     * @return string
     */
    public function getProductTag()
    {
        return $this->container['product_tag'];
    }

    /**
     * Sets product_tag
     *
     * @param string $product_tag product_tag
     *
     * @return $this
     */
    public function setProductTag($product_tag)
    {
        $this->container['product_tag'] = $product_tag;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


