<?php
/**
 * SimpleConnectedProductDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassHub API
 *
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace passhub\client\model;

use \ArrayAccess;
use \passhub\client\ObjectSerializer;

/**
 * SimpleConnectedProductDTO Class Doc Comment
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SimpleConnectedProductDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SimpleConnectedProductDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_recharge' => 'bool',
        'country_code' => 'string',
        'customer_type' => 'string',
        'description' => 'string',
        'id' => 'int',
        'location_code' => 'string',
        'location_name' => 'string',
        'max_validations_in_pass' => 'int',
        'modified_by' => '\passhub\client\model\UserDTO',
        'modified_date' => 'string',
        'name' => 'string',
        'package_product_id' => 'string',
        'price' => 'double',
        'print_type' => 'string',
        'product_id' => 'string',
        'recharge_price' => 'double',
        'retail_price' => 'double',
        'sku' => 'string',
        'sub_product_id' => 'string',
        'tags' => 'string[]',
        'timezone' => 'string',
        'type' => 'string',
        'valid_value' => 'int',
        'validation_rules' => '\passhub\client\model\Rule[]',
        'validation_tag' => 'string',
        'vendor' => '\passhub\client\model\VendorDTO',
        'vendor_account_id' => 'string',
        'vendor_sku' => 'string',
        'voucher_pattern' => '\passhub\client\model\VoucherPattern',
        'voucher_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_recharge' => null,
        'country_code' => null,
        'customer_type' => null,
        'description' => null,
        'id' => 'int64',
        'location_code' => null,
        'location_name' => null,
        'max_validations_in_pass' => 'int32',
        'modified_by' => null,
        'modified_date' => null,
        'name' => null,
        'package_product_id' => null,
        'price' => 'double',
        'print_type' => null,
        'product_id' => null,
        'recharge_price' => 'double',
        'retail_price' => 'double',
        'sku' => null,
        'sub_product_id' => null,
        'tags' => null,
        'timezone' => null,
        'type' => null,
        'valid_value' => 'int32',
        'validation_rules' => null,
        'validation_tag' => null,
        'vendor' => null,
        'vendor_account_id' => null,
        'vendor_sku' => null,
        'voucher_pattern' => null,
        'voucher_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_recharge' => 'allowRecharge',
        'country_code' => 'countryCode',
        'customer_type' => 'customerType',
        'description' => 'description',
        'id' => 'id',
        'location_code' => 'locationCode',
        'location_name' => 'locationName',
        'max_validations_in_pass' => 'maxValidationsInPass',
        'modified_by' => 'modifiedBy',
        'modified_date' => 'modifiedDate',
        'name' => 'name',
        'package_product_id' => 'packageProductId',
        'price' => 'price',
        'print_type' => 'printType',
        'product_id' => 'productId',
        'recharge_price' => 'rechargePrice',
        'retail_price' => 'retailPrice',
        'sku' => 'sku',
        'sub_product_id' => 'subProductId',
        'tags' => 'tags',
        'timezone' => 'timezone',
        'type' => 'type',
        'valid_value' => 'validValue',
        'validation_rules' => 'validationRules',
        'validation_tag' => 'validationTag',
        'vendor' => 'vendor',
        'vendor_account_id' => 'vendorAccountId',
        'vendor_sku' => 'vendorSku',
        'voucher_pattern' => 'voucherPattern',
        'voucher_type' => 'voucherType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_recharge' => 'setAllowRecharge',
        'country_code' => 'setCountryCode',
        'customer_type' => 'setCustomerType',
        'description' => 'setDescription',
        'id' => 'setId',
        'location_code' => 'setLocationCode',
        'location_name' => 'setLocationName',
        'max_validations_in_pass' => 'setMaxValidationsInPass',
        'modified_by' => 'setModifiedBy',
        'modified_date' => 'setModifiedDate',
        'name' => 'setName',
        'package_product_id' => 'setPackageProductId',
        'price' => 'setPrice',
        'print_type' => 'setPrintType',
        'product_id' => 'setProductId',
        'recharge_price' => 'setRechargePrice',
        'retail_price' => 'setRetailPrice',
        'sku' => 'setSku',
        'sub_product_id' => 'setSubProductId',
        'tags' => 'setTags',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'valid_value' => 'setValidValue',
        'validation_rules' => 'setValidationRules',
        'validation_tag' => 'setValidationTag',
        'vendor' => 'setVendor',
        'vendor_account_id' => 'setVendorAccountId',
        'vendor_sku' => 'setVendorSku',
        'voucher_pattern' => 'setVoucherPattern',
        'voucher_type' => 'setVoucherType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_recharge' => 'getAllowRecharge',
        'country_code' => 'getCountryCode',
        'customer_type' => 'getCustomerType',
        'description' => 'getDescription',
        'id' => 'getId',
        'location_code' => 'getLocationCode',
        'location_name' => 'getLocationName',
        'max_validations_in_pass' => 'getMaxValidationsInPass',
        'modified_by' => 'getModifiedBy',
        'modified_date' => 'getModifiedDate',
        'name' => 'getName',
        'package_product_id' => 'getPackageProductId',
        'price' => 'getPrice',
        'print_type' => 'getPrintType',
        'product_id' => 'getProductId',
        'recharge_price' => 'getRechargePrice',
        'retail_price' => 'getRetailPrice',
        'sku' => 'getSku',
        'sub_product_id' => 'getSubProductId',
        'tags' => 'getTags',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'valid_value' => 'getValidValue',
        'validation_rules' => 'getValidationRules',
        'validation_tag' => 'getValidationTag',
        'vendor' => 'getVendor',
        'vendor_account_id' => 'getVendorAccountId',
        'vendor_sku' => 'getVendorSku',
        'voucher_pattern' => 'getVoucherPattern',
        'voucher_type' => 'getVoucherType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CUSTOMER_TYPE_ADULT = 'ADULT';
    const CUSTOMER_TYPE_CHILD = 'CHILD';
    const CUSTOMER_TYPE_SENIOR = 'SENIOR';
    const PRINT_TYPE_AUTO_PRINT = 'AUTO_PRINT';
    const PRINT_TYPE_NOT_PRINTABLE = 'NOT_PRINTABLE';
    const TYPE_BASIC_SINGLE = 'BASIC_SINGLE';
    const TYPE_BASIC_VALID_HOURS = 'BASIC_VALID_HOURS';
    const TYPE_PASS_LIMITED = 'PASS_LIMITED';
    const TYPE_PASS_UNLIMITED = 'PASS_UNLIMITED';
    const TYPE_PASS_CALENDAR = 'PASS_CALENDAR';
    const TYPE_FLEXPASS = 'FLEXPASS';
    const TYPE_PASS_CURRENCY = 'PASS_CURRENCY';
    const VOUCHER_TYPE__DEFAULT = 'DEFAULT';
    const VOUCHER_TYPE_CUSTOM = 'CUSTOM';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerTypeAllowableValues()
    {
        return [
            self::CUSTOMER_TYPE_ADULT,
            self::CUSTOMER_TYPE_CHILD,
            self::CUSTOMER_TYPE_SENIOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrintTypeAllowableValues()
    {
        return [
            self::PRINT_TYPE_AUTO_PRINT,
            self::PRINT_TYPE_NOT_PRINTABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BASIC_SINGLE,
            self::TYPE_BASIC_VALID_HOURS,
            self::TYPE_PASS_LIMITED,
            self::TYPE_PASS_UNLIMITED,
            self::TYPE_PASS_CALENDAR,
            self::TYPE_FLEXPASS,
            self::TYPE_PASS_CURRENCY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherTypeAllowableValues()
    {
        return [
            self::VOUCHER_TYPE__DEFAULT,
            self::VOUCHER_TYPE_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_recharge'] = isset($data['allow_recharge']) ? $data['allow_recharge'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['customer_type'] = isset($data['customer_type']) ? $data['customer_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_code'] = isset($data['location_code']) ? $data['location_code'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['max_validations_in_pass'] = isset($data['max_validations_in_pass']) ? $data['max_validations_in_pass'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['package_product_id'] = isset($data['package_product_id']) ? $data['package_product_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['print_type'] = isset($data['print_type']) ? $data['print_type'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['recharge_price'] = isset($data['recharge_price']) ? $data['recharge_price'] : null;
        $this->container['retail_price'] = isset($data['retail_price']) ? $data['retail_price'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['sub_product_id'] = isset($data['sub_product_id']) ? $data['sub_product_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['valid_value'] = isset($data['valid_value']) ? $data['valid_value'] : null;
        $this->container['validation_rules'] = isset($data['validation_rules']) ? $data['validation_rules'] : null;
        $this->container['validation_tag'] = isset($data['validation_tag']) ? $data['validation_tag'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendor_account_id'] = isset($data['vendor_account_id']) ? $data['vendor_account_id'] : null;
        $this->container['vendor_sku'] = isset($data['vendor_sku']) ? $data['vendor_sku'] : null;
        $this->container['voucher_pattern'] = isset($data['voucher_pattern']) ? $data['voucher_pattern'] : null;
        $this->container['voucher_type'] = isset($data['voucher_type']) ? $data['voucher_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!in_array($this->container['customer_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customer_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPrintTypeAllowableValues();
        if (!in_array($this->container['print_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'print_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!in_array($this->container['voucher_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voucher_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!in_array($this->container['customer_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPrintTypeAllowableValues();
        if (!in_array($this->container['print_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!in_array($this->container['voucher_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets allow_recharge
     *
     * @return bool
     */
    public function getAllowRecharge()
    {
        return $this->container['allow_recharge'];
    }

    /**
     * Sets allow_recharge
     *
     * @param bool $allow_recharge allow_recharge
     *
     * @return $this
     */
    public function setAllowRecharge($allow_recharge)
    {
        $this->container['allow_recharge'] = $allow_recharge;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets customer_type
     *
     * @return string
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string $customer_type customer_type
     *
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!is_null($customer_type) && !in_array($customer_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customer_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string $location_code location_code
     *
     * @return $this
     */
    public function setLocationCode($location_code)
    {
        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name location_name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets max_validations_in_pass
     *
     * @return int
     */
    public function getMaxValidationsInPass()
    {
        return $this->container['max_validations_in_pass'];
    }

    /**
     * Sets max_validations_in_pass
     *
     * @param int $max_validations_in_pass max_validations_in_pass
     *
     * @return $this
     */
    public function setMaxValidationsInPass($max_validations_in_pass)
    {
        $this->container['max_validations_in_pass'] = $max_validations_in_pass;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return \passhub\client\model\UserDTO
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param \passhub\client\model\UserDTO $modified_by modified_by
     *
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return string
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param string $modified_date modified_date
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets package_product_id
     *
     * @return string
     */
    public function getPackageProductId()
    {
        return $this->container['package_product_id'];
    }

    /**
     * Sets package_product_id
     *
     * @param string $package_product_id package_product_id
     *
     * @return $this
     */
    public function setPackageProductId($package_product_id)
    {
        $this->container['package_product_id'] = $package_product_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets print_type
     *
     * @return string
     */
    public function getPrintType()
    {
        return $this->container['print_type'];
    }

    /**
     * Sets print_type
     *
     * @param string $print_type print_type
     *
     * @return $this
     */
    public function setPrintType($print_type)
    {
        $allowedValues = $this->getPrintTypeAllowableValues();
        if (!is_null($print_type) && !in_array($print_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'print_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['print_type'] = $print_type;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets recharge_price
     *
     * @return double
     */
    public function getRechargePrice()
    {
        return $this->container['recharge_price'];
    }

    /**
     * Sets recharge_price
     *
     * @param double $recharge_price recharge_price
     *
     * @return $this
     */
    public function setRechargePrice($recharge_price)
    {
        $this->container['recharge_price'] = $recharge_price;

        return $this;
    }

    /**
     * Gets retail_price
     *
     * @return double
     */
    public function getRetailPrice()
    {
        return $this->container['retail_price'];
    }

    /**
     * Sets retail_price
     *
     * @param double $retail_price retail_price
     *
     * @return $this
     */
    public function setRetailPrice($retail_price)
    {
        $this->container['retail_price'] = $retail_price;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets sub_product_id
     *
     * @return string
     */
    public function getSubProductId()
    {
        return $this->container['sub_product_id'];
    }

    /**
     * Sets sub_product_id
     *
     * @param string $sub_product_id sub_product_id
     *
     * @return $this
     */
    public function setSubProductId($sub_product_id)
    {
        $this->container['sub_product_id'] = $sub_product_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets valid_value
     *
     * @return int
     */
    public function getValidValue()
    {
        return $this->container['valid_value'];
    }

    /**
     * Sets valid_value
     *
     * @param int $valid_value valid_value
     *
     * @return $this
     */
    public function setValidValue($valid_value)
    {
        $this->container['valid_value'] = $valid_value;

        return $this;
    }

    /**
     * Gets validation_rules
     *
     * @return \passhub\client\model\Rule[]
     */
    public function getValidationRules()
    {
        return $this->container['validation_rules'];
    }

    /**
     * Sets validation_rules
     *
     * @param \passhub\client\model\Rule[] $validation_rules validation_rules
     *
     * @return $this
     */
    public function setValidationRules($validation_rules)
    {
        $this->container['validation_rules'] = $validation_rules;

        return $this;
    }

    /**
     * Gets validation_tag
     *
     * @return string
     */
    public function getValidationTag()
    {
        return $this->container['validation_tag'];
    }

    /**
     * Sets validation_tag
     *
     * @param string $validation_tag validation_tag
     *
     * @return $this
     */
    public function setValidationTag($validation_tag)
    {
        $this->container['validation_tag'] = $validation_tag;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \passhub\client\model\VendorDTO
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \passhub\client\model\VendorDTO $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendor_account_id
     *
     * @return string
     */
    public function getVendorAccountId()
    {
        return $this->container['vendor_account_id'];
    }

    /**
     * Sets vendor_account_id
     *
     * @param string $vendor_account_id vendor_account_id
     *
     * @return $this
     */
    public function setVendorAccountId($vendor_account_id)
    {
        $this->container['vendor_account_id'] = $vendor_account_id;

        return $this;
    }

    /**
     * Gets vendor_sku
     *
     * @return string
     */
    public function getVendorSku()
    {
        return $this->container['vendor_sku'];
    }

    /**
     * Sets vendor_sku
     *
     * @param string $vendor_sku vendor_sku
     *
     * @return $this
     */
    public function setVendorSku($vendor_sku)
    {
        $this->container['vendor_sku'] = $vendor_sku;

        return $this;
    }

    /**
     * Gets voucher_pattern
     *
     * @return \passhub\client\model\VoucherPattern
     */
    public function getVoucherPattern()
    {
        return $this->container['voucher_pattern'];
    }

    /**
     * Sets voucher_pattern
     *
     * @param \passhub\client\model\VoucherPattern $voucher_pattern voucher_pattern
     *
     * @return $this
     */
    public function setVoucherPattern($voucher_pattern)
    {
        $this->container['voucher_pattern'] = $voucher_pattern;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string $voucher_type voucher_type
     *
     * @return $this
     */
    public function setVoucherType($voucher_type)
    {
        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($voucher_type) && !in_array($voucher_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voucher_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


