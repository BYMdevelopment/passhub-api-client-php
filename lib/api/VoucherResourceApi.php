<?php
/**
 * VoucherResourceApi
 * PHP version 5
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassHub API
 *
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace passhub\client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use passhub\client\ApiException;
use passhub\client\Configuration;
use passhub\client\HeaderSelector;
use passhub\client\ObjectSerializer;

/**
 * VoucherResourceApi Class Doc Comment
 *
 * @category Class
 * @package  passhub\client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelValidation
     *
     * [V2] Cancel validation for the voucher
     *
     * @param  string $transaction_tag the transaction tag of validation (required)
     * @param  string $reason the reason of validation (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the validation note dto (optional)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \passhub\client\model\GenericStatusDTO
     */
    public function cancelValidation($transaction_tag, $reason = null, $note = null)
    {
        list($response) = $this->cancelValidationWithHttpInfo($transaction_tag, $reason, $note);
        return $response;
    }

    /**
     * Operation cancelValidationWithHttpInfo
     *
     * [V2] Cancel validation for the voucher
     *
     * @param  string $transaction_tag the transaction tag of validation (required)
     * @param  string $reason the reason of validation (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the validation note dto (optional)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \passhub\client\model\GenericStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelValidationWithHttpInfo($transaction_tag, $reason = null, $note = null)
    {
        $returnType = '\passhub\client\model\GenericStatusDTO';
        $request = $this->cancelValidationRequest($transaction_tag, $reason, $note);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\passhub\client\model\GenericStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelValidationAsync
     *
     * [V2] Cancel validation for the voucher
     *
     * @param  string $transaction_tag the transaction tag of validation (required)
     * @param  string $reason the reason of validation (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the validation note dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelValidationAsync($transaction_tag, $reason = null, $note = null)
    {
        return $this->cancelValidationAsyncWithHttpInfo($transaction_tag, $reason, $note)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelValidationAsyncWithHttpInfo
     *
     * [V2] Cancel validation for the voucher
     *
     * @param  string $transaction_tag the transaction tag of validation (required)
     * @param  string $reason the reason of validation (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the validation note dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelValidationAsyncWithHttpInfo($transaction_tag, $reason = null, $note = null)
    {
        $returnType = '\passhub\client\model\GenericStatusDTO';
        $request = $this->cancelValidationRequest($transaction_tag, $reason, $note);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelValidation'
     *
     * @param  string $transaction_tag the transaction tag of validation (required)
     * @param  string $reason the reason of validation (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the validation note dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelValidationRequest($transaction_tag, $reason = null, $note = null)
    {
        // verify the required parameter 'transaction_tag' is set
        if ($transaction_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_tag when calling cancelValidation'
            );
        }

        $resourcePath = '/api/v2/voucher/validate/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_tag !== null) {
            $queryParams['transactionTag'] = ObjectSerializer::toQueryValue($transaction_tag);
        }
        // query params
        if ($reason !== null) {
            $queryParams['reason'] = ObjectSerializer::toQueryValue($reason);
        }


        // body params
        $_tempBody = null;
        if (isset($note)) {
            $_tempBody = $note;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelVoucher
     *
     * cancelVoucher
     *
     * @param  int $order_id the internal id of order (required)
     * @param  string $voucher_id the voucher id (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the voucher note dto (optional)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \passhub\client\model\GenericStatusDTO
     */
    public function cancelVoucher($order_id, $voucher_id = null, $note = null)
    {
        list($response) = $this->cancelVoucherWithHttpInfo($order_id, $voucher_id, $note);
        return $response;
    }

    /**
     * Operation cancelVoucherWithHttpInfo
     *
     * cancelVoucher
     *
     * @param  int $order_id the internal id of order (required)
     * @param  string $voucher_id the voucher id (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the voucher note dto (optional)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \passhub\client\model\GenericStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelVoucherWithHttpInfo($order_id, $voucher_id = null, $note = null)
    {
        $returnType = '\passhub\client\model\GenericStatusDTO';
        $request = $this->cancelVoucherRequest($order_id, $voucher_id, $note);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\passhub\client\model\GenericStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelVoucherAsync
     *
     * cancelVoucher
     *
     * @param  int $order_id the internal id of order (required)
     * @param  string $voucher_id the voucher id (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the voucher note dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelVoucherAsync($order_id, $voucher_id = null, $note = null)
    {
        return $this->cancelVoucherAsyncWithHttpInfo($order_id, $voucher_id, $note)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelVoucherAsyncWithHttpInfo
     *
     * cancelVoucher
     *
     * @param  int $order_id the internal id of order (required)
     * @param  string $voucher_id the voucher id (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the voucher note dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelVoucherAsyncWithHttpInfo($order_id, $voucher_id = null, $note = null)
    {
        $returnType = '\passhub\client\model\GenericStatusDTO';
        $request = $this->cancelVoucherRequest($order_id, $voucher_id, $note);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelVoucher'
     *
     * @param  int $order_id the internal id of order (required)
     * @param  string $voucher_id the voucher id (optional)
     * @param  \passhub\client\model\OrderNoteParamDTO $note the voucher note dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelVoucherRequest($order_id, $voucher_id = null, $note = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling cancelVoucher'
            );
        }

        $resourcePath = '/api/v1/voucher/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($voucher_id !== null) {
            $queryParams['voucherId'] = ObjectSerializer::toQueryValue($voucher_id);
        }


        // body params
        $_tempBody = null;
        if (isset($note)) {
            $_tempBody = $note;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertVoucher
     *
     * convertVoucher
     *
     * @param  string $old_voucher_id the old voucher id (required)
     * @param  string $new_voucher_id the new voucher id (required)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \passhub\client\model\JSONObject
     */
    public function convertVoucher($old_voucher_id, $new_voucher_id)
    {
        list($response) = $this->convertVoucherWithHttpInfo($old_voucher_id, $new_voucher_id);
        return $response;
    }

    /**
     * Operation convertVoucherWithHttpInfo
     *
     * convertVoucher
     *
     * @param  string $old_voucher_id the old voucher id (required)
     * @param  string $new_voucher_id the new voucher id (required)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \passhub\client\model\JSONObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertVoucherWithHttpInfo($old_voucher_id, $new_voucher_id)
    {
        $returnType = '\passhub\client\model\JSONObject';
        $request = $this->convertVoucherRequest($old_voucher_id, $new_voucher_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\passhub\client\model\JSONObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertVoucherAsync
     *
     * convertVoucher
     *
     * @param  string $old_voucher_id the old voucher id (required)
     * @param  string $new_voucher_id the new voucher id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertVoucherAsync($old_voucher_id, $new_voucher_id)
    {
        return $this->convertVoucherAsyncWithHttpInfo($old_voucher_id, $new_voucher_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertVoucherAsyncWithHttpInfo
     *
     * convertVoucher
     *
     * @param  string $old_voucher_id the old voucher id (required)
     * @param  string $new_voucher_id the new voucher id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertVoucherAsyncWithHttpInfo($old_voucher_id, $new_voucher_id)
    {
        $returnType = '\passhub\client\model\JSONObject';
        $request = $this->convertVoucherRequest($old_voucher_id, $new_voucher_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertVoucher'
     *
     * @param  string $old_voucher_id the old voucher id (required)
     * @param  string $new_voucher_id the new voucher id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertVoucherRequest($old_voucher_id, $new_voucher_id)
    {
        // verify the required parameter 'old_voucher_id' is set
        if ($old_voucher_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $old_voucher_id when calling convertVoucher'
            );
        }
        // verify the required parameter 'new_voucher_id' is set
        if ($new_voucher_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_voucher_id when calling convertVoucher'
            );
        }

        $resourcePath = '/api/v1/voucher/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($old_voucher_id !== null) {
            $queryParams['oldVoucherId'] = ObjectSerializer::toQueryValue($old_voucher_id);
        }
        // query params
        if ($new_voucher_id !== null) {
            $queryParams['newVoucherId'] = ObjectSerializer::toQueryValue($new_voucher_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateVoucher
     *
     * [V2] Validates voucher which represents single order item or group of them.
     *
     * @param  string $validation_id the voucher validation id (required)
     * @param  int $vendor_id the internal id of vendor (required)
     * @param  string $product_tag the product tag (optional)
     * @param  int[] $order_item_ids the array of order item ids (optional)
     * @param  bool $skip_expiry_check flag to skip expiry check within strategy (optional)
     * @param  \passhub\client\model\ExtraValidationParamDTO $extra_param_dto the validation extra params dto (optional)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \passhub\client\model\ValidationResult
     */
    public function validateVoucher($validation_id, $vendor_id, $product_tag = null, $order_item_ids = null, $skip_expiry_check = null, $extra_param_dto = null)
    {
        list($response) = $this->validateVoucherWithHttpInfo($validation_id, $vendor_id, $product_tag, $order_item_ids, $skip_expiry_check, $extra_param_dto);
        return $response;
    }

    /**
     * Operation validateVoucherWithHttpInfo
     *
     * [V2] Validates voucher which represents single order item or group of them.
     *
     * @param  string $validation_id the voucher validation id (required)
     * @param  int $vendor_id the internal id of vendor (required)
     * @param  string $product_tag the product tag (optional)
     * @param  int[] $order_item_ids the array of order item ids (optional)
     * @param  bool $skip_expiry_check flag to skip expiry check within strategy (optional)
     * @param  \passhub\client\model\ExtraValidationParamDTO $extra_param_dto the validation extra params dto (optional)
     *
     * @throws \passhub\client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \passhub\client\model\ValidationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateVoucherWithHttpInfo($validation_id, $vendor_id, $product_tag = null, $order_item_ids = null, $skip_expiry_check = null, $extra_param_dto = null)
    {
        $returnType = '\passhub\client\model\ValidationResult';
        $request = $this->validateVoucherRequest($validation_id, $vendor_id, $product_tag, $order_item_ids, $skip_expiry_check, $extra_param_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\passhub\client\model\ValidationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateVoucherAsync
     *
     * [V2] Validates voucher which represents single order item or group of them.
     *
     * @param  string $validation_id the voucher validation id (required)
     * @param  int $vendor_id the internal id of vendor (required)
     * @param  string $product_tag the product tag (optional)
     * @param  int[] $order_item_ids the array of order item ids (optional)
     * @param  bool $skip_expiry_check flag to skip expiry check within strategy (optional)
     * @param  \passhub\client\model\ExtraValidationParamDTO $extra_param_dto the validation extra params dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateVoucherAsync($validation_id, $vendor_id, $product_tag = null, $order_item_ids = null, $skip_expiry_check = null, $extra_param_dto = null)
    {
        return $this->validateVoucherAsyncWithHttpInfo($validation_id, $vendor_id, $product_tag, $order_item_ids, $skip_expiry_check, $extra_param_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateVoucherAsyncWithHttpInfo
     *
     * [V2] Validates voucher which represents single order item or group of them.
     *
     * @param  string $validation_id the voucher validation id (required)
     * @param  int $vendor_id the internal id of vendor (required)
     * @param  string $product_tag the product tag (optional)
     * @param  int[] $order_item_ids the array of order item ids (optional)
     * @param  bool $skip_expiry_check flag to skip expiry check within strategy (optional)
     * @param  \passhub\client\model\ExtraValidationParamDTO $extra_param_dto the validation extra params dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateVoucherAsyncWithHttpInfo($validation_id, $vendor_id, $product_tag = null, $order_item_ids = null, $skip_expiry_check = null, $extra_param_dto = null)
    {
        $returnType = '\passhub\client\model\ValidationResult';
        $request = $this->validateVoucherRequest($validation_id, $vendor_id, $product_tag, $order_item_ids, $skip_expiry_check, $extra_param_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateVoucher'
     *
     * @param  string $validation_id the voucher validation id (required)
     * @param  int $vendor_id the internal id of vendor (required)
     * @param  string $product_tag the product tag (optional)
     * @param  int[] $order_item_ids the array of order item ids (optional)
     * @param  bool $skip_expiry_check flag to skip expiry check within strategy (optional)
     * @param  \passhub\client\model\ExtraValidationParamDTO $extra_param_dto the validation extra params dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateVoucherRequest($validation_id, $vendor_id, $product_tag = null, $order_item_ids = null, $skip_expiry_check = null, $extra_param_dto = null)
    {
        // verify the required parameter 'validation_id' is set
        if ($validation_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_id when calling validateVoucher'
            );
        }
        // verify the required parameter 'vendor_id' is set
        if ($vendor_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_id when calling validateVoucher'
            );
        }

        $resourcePath = '/api/v2/voucher/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($validation_id !== null) {
            $queryParams['validationId'] = ObjectSerializer::toQueryValue($validation_id);
        }
        // query params
        if ($vendor_id !== null) {
            $queryParams['vendorId'] = ObjectSerializer::toQueryValue($vendor_id);
        }
        // query params
        if ($product_tag !== null) {
            $queryParams['productTag'] = ObjectSerializer::toQueryValue($product_tag);
        }
        // query params
        if (is_array($order_item_ids)) {
            $order_item_ids = ObjectSerializer::serializeCollection($order_item_ids, 'csv', true);
        }
        if ($order_item_ids !== null) {
            $queryParams['orderItemIds'] = ObjectSerializer::toQueryValue($order_item_ids);
        }
        // query params
        if ($skip_expiry_check !== null) {
            $queryParams['skipExpiryCheck'] = ObjectSerializer::toQueryValue($skip_expiry_check);
        }


        // body params
        $_tempBody = null;
        if (isset($extra_param_dto)) {
            $_tempBody = $extra_param_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
